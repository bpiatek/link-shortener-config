spring.flyway.enabled=true
spring.threads.virtual.enabled=true

spring.boot.admin.client.url=http://link-shortener-spring-admin-dev-helm:8080

management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=ALWAYS
management.endpoint.env.show-values=ALWAYS
management.endpoint.configprops.show-values=ALWAYS
management.endpoint.logfile.access=read_only

logging.file.name=/tmp/link-service.log

# Credentials for the CLIENT to register itself
spring.boot.admin.client.username=${monitoring.user.name}
spring.boot.admin.client.password=${monitoring.user.password}

spring.boot.admin.client.instance.service-url=http://link-shortener-link-service-dev-helm:8080
# Credentials for the SERVER to use for health checks
spring.boot.admin.client.instance.metadata.user.name=${monitoring.user.name}
spring.boot.admin.client.instance.metadata.user.password=${monitoring.user.password}

link.base.url=https://apidev.bpiatek.pl/
link.short.length=7

topic.link.lifecycle=link-lifecycle-events

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.protobuf.KafkaProtobufSerializer
spring.kafka.producer.properties.schema.registry.url=http://schema-registry.kafka.svc.cluster.local:8081
spring.kafka.producer.bootstrap-servers=kafka.kafka.svc.cluster.local:9092
spring.kafka.producer.properties.auto.register.schemas=false
spring.kafka.producer.properties.use.latest.version=true